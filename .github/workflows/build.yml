name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      BUILD_TOOLS_VERSION: 30.0.0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Setup Java JDK
      uses: actions/setup-java@v1.4.0
      with:
        # The Java version to make available on the path. Takes a whole or semver Java version, or 1.x syntax (e.g. 1.8 => Java 8.x). Early access versions can be specified in the form of e.g. 14-ea, 14.0.0-ea, or 14.0.0-ea.28
        java-version: 13
        # The package type (jre, jdk, jdk+fx)
        java-package: jdk
        # The architecture (x86, x64) of the package.
        architecture: x86

    - name: Install Android SDK
      uses: malinskiy/action-android/install-sdk@release/0.0.7

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build Debug APK with Gradle
      run: ./gradlew assembleDebug

    - name: Build Release APK with Gradle
      run: ./gradlew assembleRelease
          
    - name: Sign Android release
      uses: r0adkll/sign-android-release@v1
      with:
        # The directory to find your release to sign
        releaseDirectory: app/build/outputs/apk/release
        # The key used to sign your release in base64 encoded format
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        # The key alias
        alias: ${{ secrets.ALIAS }}
        # The password to the keystore
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        # The password for the key
        keyPassword: ${{ secrets.KEY_PASSWORD }}

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: app/build/outputs/apk/**/*.apk
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error
        
    - name: Get version name
      run: |
        export VERSION_NAME=`egrep '[[:blank:]]*versionName[[:blank:]]?=[[:blank:]]?\"((\w|\.)+)\"'  app/build.gradle.kts | awk '{print $3}'| sed s/\"//g`
        echo "::set-env name=VERSION_NAME::$VERSION_NAME"
        export VERSION_CODE=`egrep '[[:blank:]]*versionCode[[:blank:]]?=[[:blank:]]?([0-9]+)'  app/build.gradle.kts | awk '{print $3}'`
        echo "::set-env name=VERSION_CODE::$VERSION_CODE"

    - name: get commit message
      run: |
           echo ::set-env name=commitmsg::$(git log --format=%B -n 1 ${{ github.event.after }})
    - name: show commit message
      run : echo $commitmsg

    - name: Create Release
      id: create_release
      if: ${{ github.event_name != 'pull_request' && contains(env.commitmsg , '[Release]') }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: ${{ github.ref }}
        # The name of the release. For example, `Release v1.0.1`
        release_name: ${{ env.VERSION_NAME }}
        # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
        draft: true
        # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
        prerelease: false
        
    - name: Upload Release Asset
      if: ${{ github.event_name != 'pull_request' && contains(env.commitmsg , '[Release]') }}
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The URL for uploading assets to the release
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # The path to the asset you want to upload
        asset_path: app/build/outputs/apk/release/juniojsv.minimum-v${{ env.VERSION_NAME }}-release-unsigned-signed.apk
        # The name of the asset you want to upload
        asset_name: juniojsv.minimum-v${{ env.VERSION_NAME }}.apk
        # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
        asset_content_type: application/vnd.android.package-archive
